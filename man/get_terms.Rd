% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_terms.R
\name{get_terms}
\alias{get_terms}
\alias{get_terms.assign_cluster_hierarchical}
\alias{get_terms.assign_cluster_kmeans}
\alias{get_terms.assign_cluster_nmf}
\alias{get_terms.assign_cluster_skmeans}
\title{Get Terms Based on Cluster Assignment in \code{assign_cluster}}
\usage{
get_terms(x, min.weight = 0.6, nrow = NULL, ...)

\method{get_terms}{assign_cluster_hierarchical}(x, min.weight = 0.6,
  nrow = NULL, ...)

\method{get_terms}{assign_cluster_kmeans}(x, min.weight = 0.6, nrow = NULL,
  ...)

\method{get_terms}{assign_cluster_skmeans}(x, min.weight = 0.6, nrow = NULL,
  ...)

\method{get_terms}{assign_cluster_nmf}(x, min.weight = 0.6, nrow = NULL,
  ...)
}
\arguments{
\item{x}{A \code{\link[clustext]{assign_cluster}} object.}

\item{min.weight}{The lowest min/max scaled tf-idf weighting to consider
as a document's salient term.}

\item{nrow}{The max number of rows to display in the returned
\code{\link[base]{data.frame}}s.}

\item{\ldots}{ignored.}
}
\value{
Returns a list of \code{\link[base]{data.frame}}s of top weighted terms.
}
\description{
Get the terms weighted (either by tf-idf or returned from the model) and
min/max scaling associated with each of the k clusters .
}
\examples{
library(dplyr)
library(textshape)

myterms <- presidential_debates_2012 \%>\%
    with(data_store(dialogue)) \%>\%
    hierarchical_cluster() \%>\%
    assign_cluster(k = 55) \%>\%
    get_terms()

myterms
textshape::tidy_list(myterms[!sapply(myterms, is.null)], "Topic")
\dontrun{
library(ggplot2)
library(gridExtra)
library(dplyr)
library(textshape)
library(wordcloud)

max.n <- max(textshape::tidy_list(myterms)[["n"]])

myplots <- Map(function(x, y){
    x \%>\%
        mutate(term = factor(term, levels = rev(term))) \%>\%
        ggplot(aes(term, weight=n)) +
            geom_bar() +
            scale_y_continuous(expand = c(0, 0),limits=c(0, max.n)) +
            ggtitle(sprintf("Topic: \%s", y)) +
            coord_flip()
}, myterms, names(myterms))

myplots[["ncol"]] <- 10

do.call(gridExtra::grid.arrange, myplots[!sapply(myplots, is.null)])

##wordclouds
par(mfrow=c(5, 11), mar=c(0, 4, 0, 0))
Map(function(x, y){
    wordcloud::wordcloud(x[[1]], x[[2]], scale=c(1,.25),min.freq=1)
    mtext(sprintf("Topic: \%s", y), col = "blue", cex=.55, padj = 1.5)
}, myterms, names(myterms))
}
}

